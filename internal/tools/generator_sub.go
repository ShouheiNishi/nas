//go:build ignore
// +build ignore

package main

import (
	"bytes"
	"fmt"
	"go/format"
	"os"
	"strings"
)

func main() {
	dirs, err := os.ReadDir("nasType")
	if err != nil {
		panic(err)
	}

	fBuf := new(bytes.Buffer)
	fmt.Fprint(fBuf, `
// Code generated by generate.sh, DO NOT EDIT.

//go:build ignore
// +build ignore

package main

import (
	"reflect"

	"github.com/free5gc/nas/nasType"
)

var nasTypeTable map[string]reflect.Type = map[string]reflect.Type{
`)

	for _, dir := range dirs {
		name := dir.Name()
		if strings.HasPrefix(name, "NAS_") && strings.HasSuffix(name, ".go") && !strings.HasSuffix(name, "_test.go") {
			name := strings.TrimPrefix(name, "NAS_")
			name = strings.TrimSuffix(name, ".go")
			fmt.Fprintf(fBuf, "\"%s\": reflect.TypeOf(nasType.%s{}),\n", name, name)
		}
	}

	fmt.Fprintln(fBuf, "}")

	out, err := format.Source(fBuf.Bytes())
	if err != nil {
		fmt.Println(string(fBuf.Bytes()))
		panic(err)
	}
	fOut, err := os.Create("internal/tools/generator_types.go")
	if err != nil {
		panic(err)
	}
	_, err = fOut.Write(out)
	if err != nil {
		panic(err)
	}
	err = fOut.Close()
	if err != nil {
		panic(err)
	}
}
